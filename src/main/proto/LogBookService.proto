syntax = 'proto3';
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "ProjectService.proto";
import "MeetingService.proto";
option java_multiple_files = true;
option csharp_namespace = "GrpcNjordClient.LogBook";
package com.sep3yg9.njorddata.grpc.protobuf.logbook;


// Allow creation of a logbook as long as there is a project assigned
message CreatingLogBook{
  int32 projectassigned = 1;
}

// Allow update of logbook as long as there is a id and a set of loogbook entries
message UpdatingLogBook{
  int32 id = 1;
  repeated LogBookEntryGrpc logbookentries = 2;
}

// Model for entry of Logbook
message LogBookEntryGrpc{
  int32 id = 1;
  int32 assignedlogbook = 2;
  com.sep3yg9.njorddata.grpc.protobuf.meeting.MeetingGrpc assignedmeeting = 3;
  string contents = 4;
}

// Full Model for Logbook, wrapper for LogBookEntry
message LogBookGrpc{
  int32 id = 1;
  com.sep3yg9.njorddata.grpc.protobuf.project.ProjectGrpc projectassigned = 2;
  repeated LogBookEntryGrpc logbookentries = 3;
}

/*
 Services for Logbook model
 */
service LogBookService{
  //Will create a logbook and return it
  rpc CreateLogBook(CreatingLogBook) returns (LogBookGrpc);
  //Will update a logbook and return it
  rpc UpdateLogBook(UpdatingLogBook) returns (LogBookGrpc);
  //Will delete a logbook and return Empty value
  rpc DeleteLogBookByProjectId(google.protobuf.Int32Value) returns (google.protobuf.Empty);
  //Will return a logbook which ID equals the ID sent in the arguments
  rpc GetById(google.protobuf.Int32Value) returns (LogBookGrpc);
  //Will return a logbook which projectId equals the ID sent in the arguments
  rpc GetByProjectId(google.protobuf.Int32Value) returns (LogBookGrpc);
}